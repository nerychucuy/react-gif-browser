{"version":3,"sources":["Components/SearchBar.js","Components/GifThumbnail.js","Components/Loader.js","Components/GifView.js","Components/GifGallery.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","React","useState","searchTerm","setSearchTerm","inputRef","createRef","useEffect","current","focus","className","position","onClick","window","location","reload","style","cursor","href","rel","target","type","ref","placeholder","value","onChange","event","onKeyDown","key","onSearch","icon","faSearch","GifThumbnail","resource","gifData","images","fixed_width","webp","title","width","height","top","left","backgroundColor","src","alt","Loader","faSpinner","spin","GifView","loaded","setLoaded","refOverlay","useRef","gif","original","parseInt","addEventListener","e","closeView","faTimes","showPrevious","faChevronLeft","previous","index","zIndex","maxWidth","maxHeight","onLoad","showNext","faChevronRight","next","GifGallery","data","_setData","openGif","_setOpenGif","refOpenGif","refDataLength","length","setOpenGif","removeEventListener","setData","columns","matrix","row","g","col","above","before","push","buildGridLayout","map","item","API_URL","process","API_KEY","App","q","setQ","page","setPage","loading","setLoading","total","setTotal","noData","setNoData","error","setError","scrollY","innerHeight","document","body","scrollHeight","fetch","then","response","json","pagination","total_count","concat","catch","getData","bannerColor","octoColor","size","direction","margin","color","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"mXA4CeA,EAvCG,SAACC,GAAW,IAAD,EAEWC,IAAMC,SAAS,IAF1B,mBAElBC,EAFkB,KAENC,EAFM,KAGnBC,EAAWJ,IAAMK,YAMvB,OAJAL,IAAMM,WAAY,WACdF,EAASG,QAAQC,UACjB,IAGA,yBAAKC,UAA8B,WAAnBV,EAAMW,SAAwB,YAAc,iBACxD,yBAAKD,UAAU,eAEX,wBAAIE,QAAS,WAAKC,OAAOC,SAASC,UAAWC,MAAO,CAACC,OAAO,YAA5D,eAGA,2CAAgB,uBAAGC,KAAK,yCAAyCC,IAAI,sBAAsBC,OAAO,UAAlF,WAGpB,yBAAKV,UAAU,cACX,2BAAOW,KAAO,OACVC,IAAOjB,EACPK,UAAY,cACZa,YAAY,yBACZC,MAAOrB,EACPsB,SAAW,SAAAC,GAAK,OAAItB,EAAcsB,EAAMN,OAAOI,QAC/CG,UAAY,SAAAD,GAAK,MAAkB,UAAdA,EAAME,KAAmB5B,EAAM6B,SAAS1B,MAGjE,4BAAQO,UAAY,eACZE,QAAY,kBAAOZ,EAAM6B,SAAS1B,KAC9B,kBAAC,IAAD,CAAiB2B,KAAMC,U,QCdpCC,EApBM,SAAChC,GAElB,IAAMiC,EAAWjC,EAAMkC,QAAQC,OAAOC,YAChCC,EAASJ,EAASI,KAClBC,EAAStC,EAAMkC,QAAQI,MACvBC,EAASN,EAASM,MAClBC,EAASP,EAASO,OAExB,OACI,yBAAKxB,MAAO,CAACL,SAAS,WAAY4B,MAAOA,EAAM,KAAMC,OAAQA,EAAS,KAC1DC,IAAKzC,EAAMkC,QAAQO,IAAKC,KAAM1C,EAAMkC,QAAQQ,KAC5CC,gBAAgB,UAAW1B,OAAO,WAC1CL,QAAWZ,EAAMY,SAEjB,yBAAKgC,IAAKP,EAAMQ,IAAKP,MCYlBQ,G,kBAvBA,SAAC9C,GAEZ,IAAIU,EAEJ,OAAOV,EAAMW,UACT,IAAK,WACDD,EAAY,iBACZ,MACJ,IAAK,WACDA,EAAY,iBACZ,MACJ,QACIA,EAAY,cAGpB,OACI,yBAAKA,UAAWA,GAAhB,cACe,kBAAC,IAAD,CAAiBoB,KAAMiB,IAAWC,MAAI,OC+C9CC,EA/DC,SAACjD,GAAW,IAAD,EAEKC,IAAMC,UAAS,GAFpB,mBAEhBgD,EAFgB,KAERC,EAFQ,KAGjBC,EAAanD,IAAMoD,SAEnBpB,EAAWjC,EAAMsD,IAAInB,OAAOoB,SAC5BlB,EAASJ,EAASI,KAClBC,EAAStC,EAAMsD,IAAIhB,MACnBC,EAASiB,SAASvB,EAASM,OAAS,GACpCC,EAASgB,SAASvB,EAASO,QAAU,GAiB3C,OAfAvC,IAAMM,WAAW,WAEb6C,EAAW5C,QAAQiD,iBAAiB,SAAS,SAACC,GAChB,YAAvBA,EAAEtC,OAAOV,WACRV,EAAM2D,iBAId,IAGJ1D,IAAMM,WAAW,WACb4C,GAAU,KACV,CAACnD,EAAMsD,MAGP,yBAAK5C,UAAU,UAAUY,IAAK8B,GAE1B,kBAAC,IAAD,CACQtB,KAAM8B,IACNlD,UAAU,cACVE,QAAUZ,EAAM2D,YAEvB3D,EAAM6D,cACP,kBAAC,IAAD,CACI/B,KAAMgC,IACNpD,UAAU,aACVE,QAAUZ,EAAM+D,WAGpB,yBAAKrD,UAAU,cAAcM,MAAO,CAACuB,MAAOA,EAAS,KAAMC,OAAQA,EAAS,OACxE,yBAAK9B,UAAU,qBACTwC,GAAU,kBAAC,EAAD,CAAQvC,SAAS,aAC7B,yBAAKiC,IAAKP,EACLQ,IAAKP,EACLV,IAAK5B,EAAMgE,MACXhD,MAAO,CAACiD,OAAO,EAAGC,SAAS,SAAUC,UAAU,SAC/CC,OAAS,WAAQjB,GAAU,QAKvCnD,EAAMqE,UACP,kBAAC,IAAD,CACIvC,KAAMwC,IACN5D,UAAU,cACVE,QAAUZ,EAAMuE,SCyDjBC,EAnHI,SAACxE,GAAW,IAAD,EAEDC,IAAMC,SAAS,IAFd,mBAEnBuE,EAFmB,KAEbC,EAFa,OAGKzE,IAAMC,UAAU,GAHrB,mBAGnByE,EAHmB,KAGVC,EAHU,KAMpBC,EAAa5E,IAAMoD,OAAOsB,GAC1BG,EAAgB7E,IAAMoD,OAAOoB,EAAKM,QAGlCC,EAAa,SAAAxD,GACfqD,EAAWrE,QAAUgB,EACrBoD,EAAapD,IAiFjB,OA5BAvB,IAAMM,WAAY,WAed,OAZAM,OAAO4C,iBAAiB,SAAS,SAACC,IACF,IAAxBmB,EAAWrE,UACG,cAAVkD,EAAE9B,IACFoD,EAAaH,EAAWrE,QAAU,GAAK,EAAIqE,EAAWrE,QAAU,EAAIqE,EAAWrE,SAC/D,eAAVkD,EAAE9B,IACRoD,EAAaH,EAAWrE,QAAU,EAAIsE,EAActE,QAAUqE,EAAWrE,QAAU,EAAIqE,EAAWrE,SAClF,WAAVkD,EAAE9B,KACRoD,GAAY,OAKjB,WACHnE,OAAOoE,oBAAoB,SAAS,kBAGxC,IAEJhF,IAAMM,WAAY,YAtEF,SAAAkE,GACZK,EAActE,QAAUiE,EAAKM,OAC7BL,EAASD,GAuETS,CA9DoB,SAAET,EAAMU,GAE5B,IAFyC,EAEnCC,EAAS,GACTpB,EAAQ,EACRqB,GAAO,EAJ4B,cAK3BZ,GAL2B,IAKzC,2BAAmB,CAAC,IAAXa,EAAU,QAEXtB,EAAQmB,IAAY,IAEpBC,IADAC,GACc,IAGlB,IAAME,EAAMvB,EAAQqB,EAAIF,EAGxB,GADAG,EAAE7C,IAAM,EACJ4C,EAAM,EAAE,CACR,IAAIG,EAAQJ,EAAOC,EAAI,GAAGE,GAC1BD,EAAE7C,IAAMe,SAASgC,EAAM/C,KAAOe,SAASgC,EAAMrD,OAAOC,YAAYI,QAAU,GAI9E,GADA8C,EAAE5C,KAAO,EACL6C,EAAM,EAAE,CACR,IAAIE,EAASL,EAAOC,GAAKE,EAAI,GAC7BD,EAAE5C,KAAOc,SAASiC,EAAO/C,MAAQc,SAASiC,EAAOtD,OAAOC,YAAYG,OAAS,GAGjF6C,EAAOC,GAAKK,KAAKJ,GACjBtB,KA3BqC,8BA6BzC,OAAOS,EAgCckB,CAAgB3F,EAAMyE,KAAMzE,EAAMmF,YAGxD,CAACnF,EAAMyE,KAAMzE,EAAMmF,UAEI,IAAtBnF,EAAMyE,KAAKM,OAAqB,KAGhC,oCACKJ,GAAW,GACR,kBAAC,EAAD,CAASrB,IAAKmB,EAAKE,GACVX,MAASW,EACThB,UAAY,kBAAMqB,GAAY,IAC9BT,KAAS,kBAtCNS,GAAa,SAAAL,GAAO,OAAIA,EAAU,EAAIF,EAAKM,OAASJ,EAAU,EAAIA,MAuCrEN,SAAaM,EAAUF,EAAKM,OAAS,EACrChB,SAAa,kBA3CXiB,GAAa,SAAAL,GAAO,OAAIA,EAAU,GAAK,EAAIA,EAAU,EAAIA,MA4C3Dd,aAAiBc,EAAU,IAGxC,yBAAKjE,UAAU,gBACV+D,EAAKmB,KAAK,SAACC,EAAM7B,GAAP,OAAiB,kBAAC,EAAD,CAAc9B,QAAS2D,EAAMjE,IAAKoC,EAAOpD,QAAU,kBAAMoE,EAAWhB,Y,iBC1G1G8B,EAAUC,uCACVC,EAAUD,mCAkHDE,EA3GH,WAAO,IAAD,EAEQhG,IAAMC,SAAS,IAFvB,mBAETuE,EAFS,KAEHS,EAFG,OAGEjF,IAAMC,SAAS,MAHjB,mBAGTgG,EAHS,KAGNC,EAHM,OAIQlG,IAAMC,SAAS,GAJvB,mBAITkG,EAJS,KAIHC,EAJG,OAKcpG,IAAMC,UAAS,GAL7B,mBAKToG,EALS,KAKAC,EALA,OAMUtG,IAAMC,SAAS,GANzB,mBAMTsG,EANS,KAMFC,EANE,OAOYxG,IAAMC,UAAS,GAP3B,mBAOTwG,EAPS,KAODC,EAPC,OAQU1G,IAAMC,SAAS,MARzB,mBAQT0G,EARS,KAQFC,EARE,KAgFhB,OA5BA5G,IAAMM,WAAW,WASf,OAPAM,OAAO4C,iBAAiB,UAAU,SAACC,GACxB7C,OAAOiG,QAAUjG,OAAOkG,aAAgBC,SAASC,KAAKC,cACvDb,GAAS,SAAAD,GAAI,OAAIA,EAAO,QAK3B,WACLvF,OAAOoE,oBAAoB,UAAU,kBAGrC,IAGJhF,IAAMM,WAAW,YArDD,SAAE2F,GAAiB,IAAdE,EAAa,uDAAN,EAEhB,OAANF,GArBU,GAqBIE,EAAmBI,IAErCD,GAAW,GAEX1F,OAAOsG,MAAP,UAAgBrB,EAAhB,oBAAmCE,EAAnC,cAAgDE,EAAhD,kBAzBc,GAyBd,mBAzBc,GAyB2EE,IACtFgB,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAE,GACLf,GAAW,GACXM,EAAS,MACTJ,EAASa,EAAKC,WAAWC,aACzBb,EAAgC,IAArBW,EAAK7C,KAAKM,QACrBG,GAAS,SAAAT,GACP,OAAa,IAAT2B,EAAmBkB,EAAK7C,KACrBA,EAAKgD,OAAOH,EAAK7C,YAG3BiD,OAAO,SAAAd,GACJC,EAAS,0DACTN,GAAW,OAkCjBoB,CAAQzB,EAAGE,KACV,CAACF,EAAGE,IAGPnG,IAAMM,WAAY,WAEZkE,EAAKM,OAAS,GAAKlE,OAAOkG,YAAeC,SAASC,KAAKC,cACzDb,GAAS,SAAAD,GAAI,OAAIA,EAAO,OAExB,CAAC3B,IAGH,oCACE,kBAAC,IAAD,CAAcvD,KAAM,kDAAmD0G,YAAY,UAAUC,UAAU,OAAOC,KAAM,GAAIC,UAAU,UAClI,yBAAK/G,MAAO,CAACuB,MAAM,MAAOyF,OAAO,WAC/B,kBAAC,EAAD,CAAWnG,SAxCA,SAAC1B,GACU,IAAtBA,EAAW4E,SAEfsB,EAAQ,GACRnB,EAAQ,IACRiB,EAAKhG,KAmC8BQ,SAAiB,OAANuF,EAAa,SAAW,QACjEQ,GACC,kEAIS,OAAVE,GACC,uBAAG5F,MAAO,CAACiH,MAAM,YACdrB,GAGJnC,EAAKM,OAAS,GACb,kBAAC,EAAD,CACIN,KAAMA,EACNU,QApGO,IAuGZmB,GAAW,kBAAC,EAAD,CAAQ3F,SAAU8D,EAAKM,OAAS,EAAI,QAAU,gBCxG9CmD,QACW,cAA7BrH,OAAOC,SAASqH,UAEe,UAA7BtH,OAAOC,SAASqH,UAEhBtH,OAAOC,SAASqH,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAd,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.ee95d771.chunk.js","sourcesContent":["import React from \"react\";\nimport '../css/SearchBar.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nconst SearchBar = (props) => {\n\n    const [searchTerm, setSearchTerm] = React.useState('');\n    const inputRef = React.createRef();\n\n    React.useEffect ( () => {\n        inputRef.current.focus();\n    } , []);\n\n    return (\n        <div className={props.position === 'center' ? 'searchBar' : 'searchBar-Top'}>\n            <div className=\"searchTitle\">\n                \n                <h1 onClick={()=>{window.location.reload()}} style={{cursor:'pointer'}}>\n                    GIF browser\n                </h1>\n                <sub>Powered by <a href=\"https://developers.giphy.com/docs/sdk/\" rel=\"noopener noreferrer\" target=\"_blank\">Giphy</a></sub>\n                \n            </div>\n            <div className=\"searchForm\">\n                <input type = \"text\" \n                    ref = {inputRef}\n                    className = \"searchInput\"\n                    placeholder=\"Search GIF database...\" \n                    value={searchTerm} \n                    onChange={ event => setSearchTerm(event.target.value)  } \n                    onKeyDown={ event => event.key === 'Enter' && props.onSearch(searchTerm) }\n                    />\n                \n                <button className = \"searchButton\" \n                        onClick = { () =>  props.onSearch(searchTerm) }>\n                            <FontAwesomeIcon icon={faSearch} />\n                        </button>\n            </div>\n        </div>\n    )\n\n}\n\nexport default SearchBar;","import React from \"react\";\n\nconst GifThumbnail = (props) => {\n\n    const resource = props.gifData.images.fixed_width;\n    const webp   = resource.webp;\n    const title  = props.gifData.title;\n    const width  = resource.width;\n    const height = resource.height;\n\n    return (\n        <div style={{position:'absolute', width: width+'px', height: height + 'px', \n                    top: props.gifData.top, left: props.gifData.left, //top and left values as per grid layout calculation (buildGridLayout)\n                    backgroundColor:'#bbbbf9', cursor:'pointer'}}\n            onClick = {props.onClick}\n        >\n            <img src={webp} alt={title} />\n        </div>\n    )\n\n}\n\nexport default GifThumbnail;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport '../css/Loader.css';\n\nconst Loader = (props) => {\n\n    let className;\n\n    switch(props.position){\n        case 'floating':\n            className = 'loaderFloating';\n            break;\n        case 'absolute':\n            className = 'loaderAbsolute';\n            break;\n        default:\n            className = 'loaderFixed';\n    }\n\n    return(\n        <div className={className}>\n            Loading... <FontAwesomeIcon icon={faSpinner} spin/>\n        </div>\n    )\n\n}\n\nexport default Loader;","import React from \"react\";\nimport '../css/GifView.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport Loader from '../Components/Loader';\n\nconst GifView = (props) => {\n\n    const [loaded, setLoaded] = React.useState(false); //used to determine if image has been loaded\n    const refOverlay = React.useRef();\n\n    const resource = props.gif.images.original;\n    const webp   = resource.webp;\n    const title  = props.gif.title;\n    const width  = parseInt(resource.width) + 10;\n    const height = parseInt(resource.height) + 10;\n\n    React.useEffect( () => {\n        //Listener to allow for closing of slideshow when clicking outside\n        refOverlay.current.addEventListener('click', (e) => {\n           if (e.target.className === 'overlay'){\n                props.closeView()\n           }\n        });\n\n    } , [])\n\n\n    React.useEffect( () => {\n        setLoaded(false);\n    } , [props.gif])\n    \n    return (\n        <div className=\"overlay\" ref={refOverlay}>\n            \n            <FontAwesomeIcon \n                    icon={faTimes} \n                    className=\"closeButton\"\n                    onClick={ props.closeView }/>\n\n            {props.showPrevious &&\n            <FontAwesomeIcon \n                icon={faChevronLeft} \n                className=\"leftButton\"\n                onClick={ props.previous }/>\n            }\n\n            <div className=\"modalWindow\" style={{width: width  + 'px', height: height + 'px'}}>\n                <div className=\"previewContainer\">\n                    {!loaded && <Loader position='absolute' />}\n                    <img src={webp} \n                         alt={title}\n                         key={props.index}\n                         style={{zIndex:2, maxWidth:'1000px', maxHeight:'600px'}}\n                         onLoad={ () => { setLoaded(true) } }\n                    /> \n                </div>\n            </div>\n\n            {props.showNext &&\n            <FontAwesomeIcon \n                icon={faChevronRight} \n                className=\"rightButton\"\n                onClick={ props.next }/>\n            }\n        </div>\n    )\n}\n\nexport default GifView;","import React from \"react\";\nimport GifThumbnail from './GifThumbnail';\nimport '../css/GifGallery.css';\nimport GifView from './GifView';\n\nconst GifGallery = (props) => { \n\n    const [data, _setData] = React.useState([]);\n    const [openGif, _setOpenGif] = React.useState(-1);\n\n    //references to be used within window event listener\n    const refOpenGif = React.useRef(openGif); \n    const refDataLength = React.useRef(data.length); \n\n    //Sets index of gif to be opened in the slideshow\n    const setOpenGif = value => {\n        refOpenGif.current = value;\n        _setOpenGif (value);\n    }\n\n    //Sets data to be displayed in the grid\n    const setData = data => {\n        refDataLength.current = data.length;\n        _setData(data);\n    }\n\n    /**\n     * Function that generates nice grid layout that fits/stretches boxes with different heights.\n     * It is achieved through absolute positioning.\n     * @param {*} data data that needs to be distributed\n     * @param {*} columns number of columns to show in the grid\n     */\n    const buildGridLayout = ( data, columns ) => {\n        \n        const matrix = [];\n        let   index = 0;\n        let   row = -1;\n        for (let g of data){\n            //initialize row\n            if (index % columns === 0){\n                row ++;\n                matrix[row] = [];\n            }\n            //determine col number\n            const col = index - row*columns;\n            //determine top value : top value of box above + height of box above + 10 margin\n            g.top = 0;\n            if (row > 0){\n                let above = matrix[row-1][col];\n                g.top = parseInt(above.top) + parseInt(above.images.fixed_width.height) + 10;\n            }\n            //determine left value : left value of box to the left + width of box to the left + 10 margin\n            g.left = 0;\n            if (col > 0){\n                let before = matrix[row][col-1];\n                g.left = parseInt(before.left) + parseInt(before.images.fixed_width.width) + 10;\n            }\n    \n            matrix[row].push(g);\n            index++;\n        }\n        return data;\n    }\n\n    //shifts carrousel index to left\n    const moveLeft = () => setOpenGif ( openGif => openGif - 1 >= 0 ? openGif - 1 : openGif );\n\n    //shifts carrousel index to right\n    const moveRight = () => setOpenGif ( openGif => openGif + 1 < data.length ? openGif + 1 : openGif ); \n\n    React.useEffect ( () => {\n\n        //Listener to allow for keyboard slideshow navigation \n        window.addEventListener('keyup', (e) => {\n            if (refOpenGif.current !== -1){\n                if (e.key === 'ArrowLeft'){\n                    setOpenGif ( refOpenGif.current - 1 >= 0 ? refOpenGif.current - 1 : refOpenGif.current );\n                }else if (e.key === 'ArrowRight'){\n                    setOpenGif ( refOpenGif.current + 1 < refDataLength.current ? refOpenGif.current + 1 : refOpenGif.current ); \n                }else if (e.key === 'Escape'){\n                    setOpenGif(-1);\n                }\n            }\n        });\n\n        return () => {\n            window.removeEventListener('keyup', () => {});\n        }\n\n    } , [])\n\n    React.useEffect ( () => {\n        \n        let dataWithLayout = buildGridLayout(props.data, props.columns);\n        setData(dataWithLayout);\n\n    }, [props.data, props.columns]);\n\n    if (props.data.length === 0) return null;\n\n    return (\n        <>\n            {openGif >= 0 && \n                <GifView gif={data[openGif]} \n                         index = {openGif}\n                         closeView={ () => setOpenGif(-1) }\n                         next = { () => moveRight()  }\n                         showNext = { openGif < data.length - 1 }\n                         previous = { () => moveLeft() }\n                         showPrevious = { openGif > 0}\n                         />\n            }\n            <div className=\"searchResult\">\n                {data.map( (item, index) => <GifThumbnail gifData={item} key={index} onClick={ () => setOpenGif(index)  } /> ) }\n            </div>\n        </>\n    )\n\n}\n\nexport default GifGallery;","import React from 'react';\nimport './App.css';\nimport SearchBar from './Components/SearchBar';\nimport GifGallery from './Components/GifGallery';\nimport Loader from './Components/Loader';\nimport GithubCorner from 'react-github-corner';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n//Number of GIFs to retrieve per API call\nconst PAGE_SIZE = 25;\n//Number of columns to show in the GIF grid\nconst GRID_COLUMNS = 6;\n\nconst App = () => {\n\n  const [data, setData] = React.useState([]);\n  const [q, setQ] = React.useState(null);\n  const [page, setPage] = React.useState(0);\n  const [loading, setLoading] = React.useState(false);\n  const [total, setTotal] = React.useState(0);\n  const [noData, setNoData] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  /**\n   * Fetch data from Giphy endpoint\n   * @param {*} q search term\n   * @param {*} page  page number\n   */\n  const getData = ( q, page = 0) => {\n    \n    if (q === null || page * PAGE_SIZE > total ) return;\n\n    setLoading(true); \n\n    window.fetch(`${API_URL}?api_key=${API_KEY}&q=${q}&limit=${PAGE_SIZE}&offset=${PAGE_SIZE*page}`)\n      .then( response => response.json() )\n      .then( json => {\n        setLoading(false);\n        setError(null);\n        setTotal(json.pagination.total_count);\n        setNoData( json.data.length === 0 );\n        setData( data => {\n          if (page === 0) return json.data;\n          return data.concat(json.data);\n        })\n      })\n      .catch( error => { \n          setError('Ouch! There has been an error. Please try again later.');\n          setLoading(false);\n    } );\n\n  }\n\n  /**\n   * Triggers a search of a new term\n   * @param {*} searchTerm \n   */\n  const doSearch = (searchTerm) => {\n    if (searchTerm.length === 0) return;\n    \n    setPage(0);\n    setData([]);\n    setQ(searchTerm);\n  } \n\n  React.useEffect( () => {\n    //Listen to scroll events in order to fetch more data when user reaches the bottom of the page\n    window.addEventListener('scroll', (e) => {\n          if ((window.scrollY + window.innerHeight) >= document.body.scrollHeight) {\n              setPage( page => page + 1 );\n          }\n      }\n    );\n\n    return () => {\n      window.removeEventListener('scroll', () => {})\n    }\n\n  } , []);\n\n\n  React.useEffect( ()=>{\n    getData(q, page);\n  }, [q, page]);\n\n\n  React.useEffect ( () => {\n    //Fetch more data in case that initial load was too small for this viewport\n    if (data.length > 0 && window.innerHeight >  document.body.scrollHeight){\n      setPage( page => page + 1 );\n    }\n  } , [data]);\n\n  return (\n    <>\n      <GithubCorner href={'https://github.com/nerychucuy/react-gif-browser'} bannerColor=\"#7f51fd\" octoColor=\"#fff\" size={80} direction=\"right\" />\n      <div style={{width:'80%', margin:'0 auto'}}>\n        <SearchBar onSearch={doSearch} position={ q === null ? 'center' : 'top' }/>\n        {noData && \n          <p>\n            No results found. Try another word.\n          </p>\n        }\n        {error !== null && \n          <p style={{color:'#ff0000'}}>\n            {error}\n          </p>\n        }\n        {data.length > 0 &&\n          <GifGallery \n              data={data} \n              columns={GRID_COLUMNS}\n            />\n        }\n        {loading && <Loader position={data.length > 0 ? 'fixed' : 'floating'}/>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}